---
title: "Assignment2 622"
format: pdf
editor: visual
---

```{r warning = FALSE, message=FALSE, include=FALSE}
library(RedditExtractoR)
library(tidytext)
library(dplyr)
library(pander)
library(knitr)
library(ggplot2)
library(gridExtra)
library(scales)
library(topicmodels)
library(stringr)
library(quanteda)
library(kableExtra)
```

## Find Subreddits

```{r}
# Search for subreddits related to phone preferences
phone_sub_df <- find_subreddits("iOS Android phone")
phone_sub_df <- data.frame(phone_sub_df)
phone_sub_df_clean <- phone_sub_df %>%
  select(subreddit, 
         title, 
         description, 
         subscribers, 
         date_utc)
```

```{r}
# Format and examine the data
phone_sub_df_clean$date_utc <- as.Date(phone_sub_df_clean$date_utc)
rownames(phone_sub_df_clean) <- 1:nrow(phone_sub_df_clean)
str(head(phone_sub_df_clean, 1))
pander(dim(phone_sub_df))
pander(dim(phone_sub_df_clean))
```

```{r}
# Visualize subscriber counts
phone_sub_df_clean %>%
  ggplot(aes(x = subreddit, y = subscribers)) +
  geom_bar(stat = 'identity',
           color = 'black',
           fill = 'steelblue') +
  theme(axis.text.x = element_text(angle = 90,
                                   vjust = 0,
                                   hjust = 1,
                                   size = 2)) +
  scale_y_continuous(breaks = pretty_breaks(n=5)) +
  labs(title = "Subscriber Counts for Phone-Related Subreddits",
       x = "Subreddit",
       y = "Number of Subscribers")
```

```{r warning = FALSE, message=FALSE}
# Function to clean subreddit descriptions
desc_clean <- function(x){
  tk <- tibble(line = 1, text = x)
  tk <- tk %>% 
    unnest_tokens(word, text) %>% 
    anti_join(stop_words)
  return(tolower(str_c(tk$word, collapse = ' ')))
}

# Clean the descriptions
phone_sub_df_clean <- phone_sub_df_clean %>%
  rowwise() %>%
  mutate(cleaned_description = desc_clean(description)) %>%
  select(-description) %>%
  ungroup()
```

```{r}
# Function to check if subreddit is related to phone preferences
check_phone_preference <- function(x){
  keywords <- c('iOS',
                'Android',
                'Apple',
                'Samsung',
                'iPhone',
                'Galaxy',
                'smartphone',
                'mobile',
                'phone',
                'app',
                'operating system',
                'ecosystem',
                'customization',
                'security',
                'privacy',
                'user experience',
                'interface'
                )
  pattern <- paste0("\\b(", paste(keywords, collapse = "|"), ")\\b")
  any(str_detect(tolower(x), pattern = pattern))
}

# Filter for relevant subreddits
phone_sub_df_clean <- phone_sub_df_clean %>% 
  rowwise() %>%
  mutate(phone_related = if_else(check_phone_preference(cleaned_description), TRUE, FALSE)) %>%
  ungroup()
```

```{r}
# Select top relevant subreddits
subreddit_df <- phone_sub_df_clean %>%
  filter(phone_related == TRUE) %>%
  arrange(desc(subscribers)) %>% 
  head(n=10)

# Display in a table
subreddit_df[c(1:4)] %>%
  pander(caption = "Subreddits Related to Phone Preferences")

# Visualize top subreddits by subscriber count
subreddit_df %>% 
  ggplot(aes(x = reorder(subreddit, subscribers), y = subscribers/1000000)) +
  geom_bar(stat = 'identity',
           fill = 'steelblue') +
  coord_flip() +
  theme_minimal() +
  labs(title = "Top Phone-Related Subreddits by Subscriber Count",
       x = "Subreddit",
       y = "Subscribers (in millions)")
```

## Analyzing Subreddit Descriptions

```{r}
# Extract key terms from descriptions
subreddit_terms <- subreddit_df %>%
  select(subreddit, cleaned_description) %>%
  unnest_tokens(word, cleaned_description) %>%
  count(subreddit, word, sort = TRUE) %>%
  group_by(subreddit) %>%
  top_n(5, n) %>%
  arrange(subreddit, desc(n))

# Display key terms for each subreddit
subreddit_terms %>%
  pander(caption = "Top 5 Terms in Each Subreddit's Description")

# Visualize key terms
subreddit_terms %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = subreddit)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ subreddit, scales = "free_y") +
  coord_flip() +
  labs(title = "Most Common Words in Subreddit Descriptions",
       x = NULL,
       y = "Word Frequency") +
  theme_minimal()
```


```{r}
# First, let's define our stances
stances <- c("favor_ios", "favor_android", "neutral", "irrelevant")

# Assuming we have already collected reddit_data from the subreddits
# For demonstration, let's create a sample dataset
set.seed(123)

# Sample post texts related to iOS vs Android debate
sample_texts <- c(
  "iOS is so much more secure than Android, I would never switch.",
  "Android gives me the freedom to customize everything, iOS is too restrictive.",
  "Just switched from iPhone to Samsung and couldn't be happier.",
  "Apple's ecosystem integration is unmatched, everything just works together.",
  "Both OS have their pros and cons, it really depends on what you value.",
  "Android phones have better hardware specs for the price.",
  "iOS apps are generally more polished and consistent.",
  "I prefer the simplicity of iOS, Android is too complicated.",
  "Android's open-source nature gives developers more flexibility.",
  "This post has nothing to do with phones or operating systems."
)
```

```{r}
# Create a larger sample by repeating and slightly modifying the samples
generate_samples <- function(texts, n = 100) {
  modifiers <- c("I think ", "In my opinion, ", "From my experience, ", 
                "Honestly, ", "Definitely ", "Without a doubt, ", 
                "Most people agree that ", "Many would say that ")
  
  suffixes <- c(", based on my experience.", ".", ", don't you agree?", 
               ", which is important to me.", ", that's why I prefer it.", 
               ", but that's just my take.", ", though others may disagree.")
  
  result <- c()
  
  while(length(result) < n) {
    # Pick a random text
    text <- sample(texts, 1)
    
    # Sometimes add a prefix or suffix or both
    if (runif(1) > 0.5) text <- paste0(sample(modifiers, 1), tolower(substr(text, 1, 1)), substr(text, 2, nchar(text)))
    if (runif(1) > 0.5) text <- paste0(text, sample(suffixes, 1))
    
    # Add to result if not already there
    if (!text %in% result) result <- c(result, text)
  }
  
  return(result[1:n])
}
```

```{r}
# Create a dataset of 100 posts to hand-code
set.seed(456)
n_posts <- 100
posts_to_code <- data.frame(
  post_id = 1:n_posts,
  subreddit = sample(subreddit_df$subreddit[1:10], n_posts, replace = TRUE),
  text = generate_samples(sample_texts, n_posts),
  date = sample(seq(as.Date('2023-01-01'), as.Date('2023-12-31'), by="day"), n_posts, replace = TRUE),
  stringsAsFactors = FALSE
)

# Add a column for hand-coding stance
posts_to_code$stance <- NA
```

```{r}
# Display a few sample posts to code
kable(head(posts_to_code[, c("post_id", "subreddit", "text")], 10),
      caption = "Sample Posts for Hand-Coding") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```


```{r}

```