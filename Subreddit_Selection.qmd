---
title: "Assignment2 622"
format: pdf
editor: visual
---

```{r warning = FALSE, message=FALSE, include=FALSE}
library(RedditExtractoR)
library(tidytext)
library(dplyr)
library(pander)
library(knitr)
library(ggplot2)
library(gridExtra)
library(scales)
library(topicmodels)
library(stringr)
library(quanteda)
library(kableExtra)
```

## Find Subreddits

```{r}
# Search for subreddits related to phone preferences
phone_sub_df <- find_subreddits("iOS Android phone")
phone_sub_df <- data.frame(phone_sub_df)
phone_sub_df_clean <- phone_sub_df %>%
  select(subreddit, 
         title, 
         description, 
         subscribers, 
         date_utc)
```

```{r}
# Format and examine the data
phone_sub_df_clean$date_utc <- as.Date(phone_sub_df_clean$date_utc)
rownames(phone_sub_df_clean) <- 1:nrow(phone_sub_df_clean)
str(head(phone_sub_df_clean, 1))
pander(dim(phone_sub_df))
pander(dim(phone_sub_df_clean))
```

```{r}
# Visualize subscriber counts
phone_sub_df_clean %>%
  ggplot(aes(x = subreddit, y = subscribers)) +
  geom_bar(stat = 'identity',
           color = 'black',
           fill = 'steelblue') +
  theme(axis.text.x = element_text(angle = 90,
                                   vjust = 0,
                                   hjust = 1,
                                   size = 2)) +
  scale_y_continuous(breaks = pretty_breaks(n=5)) +
  labs(title = "Subscriber Counts for Phone-Related Subreddits",
       x = "Subreddit",
       y = "Number of Subscribers")
```

```{r warning = FALSE, message=FALSE}
# Function to clean subreddit descriptions
desc_clean <- function(x){
  tk <- tibble(line = 1, text = x)
  tk <- tk %>% 
    unnest_tokens(word, text) %>% 
    anti_join(stop_words)
  return(tolower(str_c(tk$word, collapse = ' ')))
}

# Clean the descriptions
phone_sub_df_clean <- phone_sub_df_clean %>%
  rowwise() %>%
  mutate(cleaned_description = desc_clean(description)) %>%
  select(-description) %>%
  ungroup()
```

```{r}
# Function to check if subreddit is related to phone preferences
check_phone_preference <- function(x){
  keywords <- c('iOS',
                'Android',
                'Apple',
                'Samsung',
                'iPhone',
                'Galaxy',
                'smartphone',
                'mobile',
                'phone',
                'app',
                'operating system',
                'ecosystem',
                'customization',
                'security',
                'privacy',
                'user experience',
                'interface'
                )
  pattern <- paste0("\\b(", paste(keywords, collapse = "|"), ")\\b")
  any(str_detect(tolower(x), pattern = pattern))
}

# Filter for relevant subreddits
phone_sub_df_clean <- phone_sub_df_clean %>% 
  rowwise() %>%
  mutate(phone_related = if_else(check_phone_preference(cleaned_description), TRUE, FALSE)) %>%
  ungroup()
```

```{r}
# Select top relevant subreddits
subreddit_df <- phone_sub_df_clean %>%
  filter(phone_related == TRUE) %>%
  arrange(desc(subscribers)) %>% 
  head(n=10)

# Display in a table
subreddit_df[c(1:4)] %>%
  pander(caption = "Subreddits Related to Phone Preferences")

# Visualize top subreddits by subscriber count
subreddit_df %>% 
  ggplot(aes(x = reorder(subreddit, subscribers), y = subscribers/1000000)) +
  geom_bar(stat = 'identity',
           fill = 'steelblue') +
  coord_flip() +
  theme_minimal() +
  labs(title = "Top Phone-Related Subreddits by Subscriber Count",
       x = "Subreddit",
       y = "Subscribers (in millions)")
```

## Analyzing Subreddit Descriptions

```{r}
# Extract key terms from descriptions
subreddit_terms <- subreddit_df %>%
  select(subreddit, cleaned_description) %>%
  unnest_tokens(word, cleaned_description) %>%
  count(subreddit, word, sort = TRUE) %>%
  group_by(subreddit) %>%
  top_n(5, n) %>%
  arrange(subreddit, desc(n))

# Display key terms for each subreddit
subreddit_terms %>%
  pander(caption = "Top 5 Terms in Each Subreddit's Description")

# Visualize key terms
subreddit_terms %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = subreddit)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ subreddit, scales = "free_y") +
  coord_flip() +
  labs(title = "Most Common Words in Subreddit Descriptions",
       x = NULL,
       y = "Word Frequency") +
  theme_minimal()
```


```{r}
# Define the stances for classification
stances <- c("favor_ios", "favor_android", "neutral", "irrelevant")

# Create sample data with 100 rows of posts
set.seed(123) # For reproducibility

# Sample iOS vs Android related texts
sample_texts <- c(
  "iOS is so much more secure than Android, I would never switch.",
  "Android gives me the freedom to customize everything, iOS is too restrictive.",
  "Just switched from iPhone to Samsung and couldn't be happier.",
  "Apple's ecosystem integration is unmatched, everything just works together.",
  "Both OS have their pros and cons, it really depends on what you value.",
  "Android phones have better hardware specs for the price.",
  "iOS apps are generally more polished and consistent.",
  "I prefer the simplicity of iOS, Android is too complicated.",
  "Android's open-source nature gives developers more flexibility.",
  "This post has nothing to do with phones or operating systems."
)

# Generate variations of these texts to create 100 unique posts
generate_variations <- function(texts, n = 100) {
  result <- c()
  while(length(result) < n) {
    text <- sample(texts, 1)
    # Add slight variations
    if (runif(1) > 0.5) {
      prefix <- sample(c("I think ", "In my opinion, ", "Honestly, "), 1)
      text <- paste0(prefix, tolower(substr(text, 1, 1)), substr(text, 2, nchar(text)))
    }
    if (!text %in% result) result <- c(result, text)
  }
  return(result[1:n])
}

# Create the dataframe with 100 posts
posts_df <- data.frame(
  post_id = 1:100,
  subreddit = sample(c("Android", "ios", "iphone", "apple", "samsung"), 100, replace = TRUE),
  text = generate_variations(sample_texts, 100),
  stringsAsFactors = FALSE
)

# Add empty stance column for classification
posts_df$stance <- NA

# View a few sample rows
head(posts_df, 5)

# Export to CSV for manual classification
write.csv(posts_df, "posts_to_classify.csv", row.names = FALSE)

cat("Instructions for classifying posts:\n")
cat("1. Open 'posts_to_classify.csv' in Excel or a similar application\n")
cat("2. Read each post in the 'text' column\n")
cat("3. In the 'stance' column, enter one of these classifications:\n")
cat("   - favor_ios: Post clearly favors iOS/Apple\n")
cat("   - favor_android: Post clearly favors Android/Samsung\n")
cat("   - neutral: Post acknowledges both sides or doesn't indicate a preference\n")
cat("   - irrelevant: Post is unrelated to iOS vs Android debate\n")
cat("4. Save the file when done\n")
cat("5. Import back into R for analysis with:\n")
cat("   classified_posts <- read.csv('posts_to_classify.csv')\n")
```